using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;

namespace UisSubsea.RovTopside.Data
{
    public class JoystickStateListener
    {
        /// <summary>
        /// This class is used to listen for harware interrupts
        /// generated by the joystick (passed in to the constructor).
        /// 
        /// Subscribe to the JoystickStateChanged to be notified when
        /// the joystick generates an interrupt. You can then poll the
        /// joystick for its state and do something useful with it.
        /// 
        /// When an interrupt is generated, the current state of the
        /// corresponding joystick will be stored. The same store object
        /// is used from the communication server to ensure that the joystick
        /// state that is being sent to the CCU is always the most recent.
        /// </summary>

        private WaitHandle handle;
        private Joystick joystick;
        private PacketBuilder packetBuilder;
        private JoystickStateStore holder;

        public EventHandler JoystickStateChanged;

        public JoystickStateListener(Joystick js, PacketBuilder pb, JoystickStateStore holder)
        {
            this.joystick = js;
            this.handle = js.WaitHandle;
            this.packetBuilder = pb;
            this.holder = holder;
        }

        public void Listen()
        {
            while(true)
            {
                handle.WaitOne();
               
                byte[] packet = packetBuilder.BuildJoystickStatePacket();

                holder.StoreState(packet, joystick.Type);

                OnJoystickStateChanged(new EventArgs());
            }
        }

        // This method is virtual to ensure that it can be overridden in a derived class.
        protected virtual void OnJoystickStateChanged(EventArgs e)
        {
            EventHandler handler = JoystickStateChanged;
            if (handler != null)
            {
                handler(this, e);
            }
        }
      
        public Joystick Joystick
        {
            get
            {
                return this.joystick;
            }
        }
    }
}
