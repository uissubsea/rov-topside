<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>UisSubsea.RovTopside.Data Namespace</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="UisSubsea.RovTopside.Data namespace" /><meta name="Microsoft.Help.F1" content="UisSubsea.RovTopside.Data" /><meta name="Microsoft.Help.Id" content="N:UisSubsea.RovTopside.Data" /><meta name="Description" content="summaryN:UisSubsea.RovTopside.Data" /><meta name="Microsoft.Help.ContentType" content="Reference" /><link rel="stylesheet" type="text/css" href="../styles/Presentation.css" /><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/Dropdown.js"> </script><script type="text/javascript" src="../scripts/script_manifold.js"> </script><script type="text/javascript" src="../scripts/script_feedBack.js"> </script><script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script><script type="text/javascript" src="../scripts/CommonUtilities.js"> </script><meta name="container" content="UisSubsea.RovTopside.Data" /><meta name="file" content="0e194f29-5760-daaf-bb54-e71f78024f28" /><meta name="guid" content="0e194f29-5760-daaf-bb54-e71f78024f28" /></head><body><input type="hidden" id="userDataCache" class="userDataStyle" /><input type="hidden" id="hiddenScrollOffset" /><img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="Collapse image" title="Collapse image" /><img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="Expand Image" title="Expand Image" /><img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" /><img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" /><img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" /><img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" /><img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" alt="Copy image" title="Copy image" /><img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" /><div id="header"><table id="topTable" cellspacing="0" cellpadding="0"><tr><td><span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0"><img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span><span>    </span><span id="devlangsDropdown" class="filter" tabindex="0"><img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: All </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Multiple </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: C# </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual Basic </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual C++ </nobr></label><label id="devlangsMenuFSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: F# </nobr></label></span></td></tr></table><div id="devlangsMenu"><input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="CSharpCheckbox">C#</label><br /><input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label><br /><input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label><br /><input id="FSharpCheckbox" type="checkbox" data="FSharp,fs,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="FSharpCheckbox">F#</label><br /></div><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">A Sandcastle Documented Class Library</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">UisSubsea.RovTopside.Data Namespace</span></td></tr><tr id="headerTableRow3"><td align="left"><span id="headfeedbackarea" class="feedbackhead"><a href="#" onclick="javascript:SubmitFeedback('','A Sandcastle Documented Class Library','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback'); return false;">Send Feedback</a></span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" id="headerBottom"><img id="headerBottomImage" style="display: none;" src="../icons/gradient.gif" /></td></tr></table></div><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" /><span style="color: DarkGray"></span><div class="summary"><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;summary&gt; documentation for "N:UisSubsea.RovTopside.Data"]</p></div><h1 class="heading"><span onclick="ExpandCollapse(classToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(classToggle, event)" tabindex="0"><img id="classToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Classes</span></h1><div id="classSection" class="section" name="collapseableSection" style=""><table id="typeList" class="members" frame="lhs" cellpadding="2"><col width="10%" /><tr><th class="iconColumn">
					 
				</th><th class="nameColumn">Class</th><th class="descriptionColumn">Description</th></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="0bffe866-5520-827a-e059-118232e3e958.htm">Camera</a></td><td><div class="summary">
            This class creates an instance of a VideoCaptureDevice.
            It is able to display the camera frames on a canvas,
            take snapshots and record video. 
            
            If you don't want this 
            class to handle new frame events, you can use the constructor
            that doesn't take a PictureBox. Then you would want to get the 
            camera instance and add your own event handler.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="676a8542-3086-66d6-3501-27a887450c0b.htm">CameraFactory</a></td><td><div class="summary">
            This class provides static methods to
            retrieve an instance of each of the cameras
            on the ROV.
            
            It is implemented using a singleton pattern
            because it does not make sense to have more
            than one instance of each camera.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="2262ed4d-2d2e-810c-0e88-318256369289.htm">CommunicationServer</a></td><td><div class="summary">
            This class handles all of the communication with the ROV.
            
            The basics of the algorithm (this is an indefinite loop):
            1. Receive the state of the ROV
                - Wait for start byte
                - Buffer data until stop byte is received
            2. Send joystick positions
            3. Signal that a packet is received
            4. Clear the buffer
            
            #2 comes before processing the data received to decrease the 
            time the ROV has to wait for data after it reports that it is
            ready to receive (it is ready to receive once it has sent a 
            packet of its state).
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="378a17ef-af51-e8ff-9e88-9c5a7f42e5bd.htm">Constants</a></td><td><div class="summary">
            This class holds the constants that will be used
            by some of the components in the application.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="9414fabf-afc6-065a-f712-d730103bb2de.htm">DataReceivedEventArgs</a></td><td><div class="summary">
            This is a wrapper class for the data that is
            received from the serial port.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="66baf0a1-89e0-cecc-dfa5-fdd1fd19cf74.htm">FocusChangedEventArgs</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="8e691c5c-6bfc-efb1-f03c-0f3d19e8849a.htm">Joystick</a></td><td><div class="summary">
            This class interacts with the joysticks
            that are attached to the computer.
            
            It exposed the functionality defined in IJoystick.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="0a481e94-73f8-14a4-e39d-90ae974fa7e6.htm">JoystickFactory</a></td><td><div class="summary">
            This class provides static methods to
            retrieve an instance of each of the joysticks
            connected.
            
            It is implemented using a singleton pattern
            because it does not make sense to have more
            than one instance of each joystick.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="2d21cf21-2c63-4a6f-52b8-eee7ce57ac85.htm">JoystickStateListener</a></td><td><div class="summary">
            This class is used to listen for harware interrupts
            generated by the joystick (passed in to the constructor).
            
            Subscribe to the JoystickStateChanged to be notified when
            the joystick generates an interrupt. You can then poll the
            joystick for its state and do something useful with it.
            
            When an interrupt is generated, the current state of the
            corresponding joystick will be stored. The same store object
            is used from the communication server to ensure that the joystick
            state that is being sent to the CCU is always the most recent.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="e5f28c0f-7f24-ae66-b4b5-c1fcdeaa75ff.htm">JoystickStateStore</a></td><td><div class="summary">
            This class serves the purpose of always having the
            most recent state of each joystick.
            
            The joystick state listeners updates this class when 
            an interrupt is generated by one of the joysticks.
            
            The communication server fetches the packages stored 
            here, and transmits them down to the CCU for further processing.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="3854f75c-649c-8c57-2841-9b098abac635.htm">MainPacketBuilder</a></td><td><div class="summary">
            This class is able to build a packet
            containing the state of the pilots joystick.
            
            It extends the basic functionality in PacketBuilder
            to fit the needs of the pilot.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="29c5f3a5-8953-8bf3-6369-78911ea928fa.htm">ManipulatorLeftPacketBuilder</a></td><td><div class="summary">
            This class is able to build a packet
            containing the state of the co-pilots left joystick.
            
            It extends the basic functionality in PacketBuilder
            to fit the needs of the co-pilot.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="46d19775-ed52-bf81-1fa9-e983c403da33.htm">ManipulatorRightPacketBuilder</a></td><td><div class="summary">
            This class is able to build a packet
            containing the state of the co-pilots right joystick.
            
            It extends the basic functionality in PacketBuilder
            to fit the needs of the co-pilot.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="3f06f3c4-86c2-1fa7-1fc0-f445eaf08aaf.htm">PacketBuilder</a></td><td><div class="summary">
            This class is responsible for packing
            the state of the joystick before sending
            it as a packet to the ROV's supernode.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="1ab22fa7-86ad-702e-a5e5-b836369dbe95.htm">RovState</a></td><td><div class="summary">
            This class is meant to provide a logic
            representation of the ROVs current state.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="0c017b49-439e-3525-d385-3d38a7dc2c5f.htm">RovStateBuilder</a></td><td><div class="summary">
            Build an rov state object based
            on data received from the ROV
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="2ae172b3-a52f-f866-a522-be4ea7d9b943.htm">SerialPortSingleton</a></td><td><div class="summary">
            A singleton pattern is used with the serial port
            because we will never use more than one port for
            communication. The com port name is hardcoded
            to make it easier to use. When you plug in your
            MCU (Micro Control Unit), go to device manager
            and make sure that the name is set to COM1.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="ccc51ae0-ddd4-9808-7db5-14775868e0ad.htm">VideoRecorder</a></td><td><div class="summary">
            This class handles video recording. 
            It takes all frames in the frame buffer and record
            it to disk using MPEG2 codec with a 10Mb/s bit rate.
            </div></td></tr></table></div><h1 class="heading"><span onclick="ExpandCollapse(interfaceToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(interfaceToggle, event)" tabindex="0"><img id="interfaceToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Interfaces</span></h1><div id="interfaceSection" class="section" name="collapseableSection" style=""><table id="typeList" class="members" frame="lhs" cellpadding="2"><col width="10%" /><tr><th class="iconColumn">
					 
				</th><th class="nameColumn">Interface</th><th class="descriptionColumn">Description</th></tr><tr data="interface; public"><td><img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="96911af8-2429-a9c4-4b7d-4fd96c1bfe56.htm">ICamera</a></td><td><div class="summary">
            Camera interface.
            </div></td></tr><tr data="interface; public"><td><img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="f82bef83-16c1-c47b-d58c-0859ea2627e3.htm">IJoystick</a></td><td><div class="summary">
            Joystick interface.
            </div></td></tr><tr data="interface; public"><td><img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="5d22a9b4-4e10-4ca7-0ee3-a05144dcf308.htm">IView</a></td><td><div class="summary">
            Implement this interface if your class
            has the ability to handle a video feed.
            </div></td></tr></table></div><h1 class="heading"><span onclick="ExpandCollapse(enumerationToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(enumerationToggle, event)" tabindex="0"><img id="enumerationToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Enumerations</span></h1><div id="enumerationSection" class="section" name="collapseableSection" style=""><table id="typeList" class="members" frame="lhs" cellpadding="2"><col width="10%" /><tr><th class="iconColumn">
					 
				</th><th class="nameColumn">Enumeration</th><th class="descriptionColumn">Description</th></tr><tr data="enumeration; public"><td><img src="../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" /></td><td><a href="ddea176b-6bc4-9e26-4d3f-8c4e21a36e06.htm">JoystickType</a></td><td><div class="summary">
            The three types of joysticks we have in our system.
            </div></td></tr><tr data="enumeration; public"><td><img src="../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" /></td><td><a href="1089e8e6-097c-21f8-270b-5b8a90f33392.htm">PacketBuilder<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>PointOfView</a></td><td /></tr></table></div></div><div id="footer"><div class="footerLine"><img width="100%" height="3px" src="../icons/footer.gif" alt="Footer image" title="Footer image" /></div><A NAME="feedback"></A><span id="fb" class="feedbackcss"></span></div></div></body></html>